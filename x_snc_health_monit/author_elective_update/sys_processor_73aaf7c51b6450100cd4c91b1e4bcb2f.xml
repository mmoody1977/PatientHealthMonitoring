<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_processor">
    <sys_processor action="DELETE">
        <active>true</active>
        <class_name/>
        <description>ServerSent scripted processor&#13;
ServerSent HTML5&#13;
Usage: https://yourinstance.service-now.com/serversent.do?event_subscription=incident.updated&amp;record_sid=d71da88ac0a801670061eabfe4b28f77</description>
        <interactive>false</interactive>
        <name>ServerSent</name>
        <parameters/>
        <params_endpoint/>
        <path>serversent</path>
        <path_endpoint>x_snc_health_monit_serversent</path_endpoint>
        <require_csrf>false</require_csrf>
        <roles/>
        <script><![CDATA[(function process(g_request, g_response, g_processor) {
    // Event name from the sysevent table you wish to subscribe to
    var subscribedEvent = g_request.getParameter("event_subscription");
    // sys_id of the record that will trigger the event in the sysevent table. The value in the .instance field.
    var subscribedRecord = g_request.getParameter("record_sid");

    // Setup headers for ServerSent responses
    g_response.setContentType("text/event-stream");
    g_response.setHeader("Cache-Control", "no-cache");
    g_response.setHeader("Connection", "keep-alive");
    g_response.setHeader("Access-Control-Allow-Origin", "*");

    // Test if the subscribed event has fired, and if so send notification to subscribed client browser
    var clientResponse = eventFired(subscribedEvent, subscribedRecord);
    if (clientResponse.length > 0) {
        g_processor.writeOutput("text/event-stream", "id: " + String(event.sys_id) + "\n" + "data: " + JSON.stringify(clientResponse) + "\n\n");
    }

    function eventFired(eventName, eventSid) {
        var clientResponse = [];
        // Query the sysevent table for the event desired.
        // Query for a specific record that the event was triggered against.
        // Query for the target event triggered within the current minute.
        var query = "sys_created_onONCurrent minute@javascript:gs.beginningOfCurrentMinute()@javascript:gs.endOfCurrentMinute()^ORsys_created_onONLast minute@javascript:gs.beginningOfLastMinute()@javascript:gs.endOfLastMinute()^name=" + eventName + "^instance=" + eventSid;
        var event = new GlideRecord('sysevent');
        event.addEncodedQuery(query);
        event.orderBy("sys_created_on");
        event.query();
        // Build client response from each occurance of the target event within the current minute.
        while (event.next()) {
            if (!gs.nil(event.instance)) {
                // Get the target record that the event was triggered from
                var record = new GlideRecord(String(event.table));
                if (record.get(event.instance)) {
                    var shouldSend = true;
                    // Construct a HTML formated message for client browser processing.
                    var messageOutput = [];
                    var updateEvent = false;
                    // Widget Table | persistent 
                    if (String(record.getTableName()) == "x_ebay_nsa_table_widget") {
                        // Expected JSON object in event.parm1
                        messageOutput.push(String(event.parm1));
                        if (event.state == "processed") {
                            //shouldSend = false;
                        }
                        else {
                            updateEvent = true;
                        }
                        updateEvent = true;
                    }
                    else {
                        messageOutput.push("<h2>" + String(event.parm1) + "</h2>");
                    }
                    //messageOutput.push("<h2>" + record.number + " was updated successfully!</h2>");

                    // Construct a JSON object for passing message and unique ID to client side.
                    var outputObj = {};
                    outputObj.message = messageOutput.toString();
                    outputObj.id = String(event.sys_id);
                    outputObj.instance = String(event.instance);
                    if (event.name == 'x_ebay_integration.transaction_failure') {
                        outputObj.type = "transaction";
                    }
                    else {
                        outputObj.type = "";
                    }
                    if (shouldSend) {
                        clientResponse.push(outputObj);
                    }
                    if (updateEvent) {
                        event.processed = new GlideDateTime();
                        event.state = "processed";
                        event.setWorkflow(false);
                        event.update();
                    }
                    /*
                    // Send message to client side browser using JSON object and event unique id. Use event-stream formatting as specified via the ServerSent protocol.
                    if (shouldSend) {
                        g_processor.writeOutput("text/event-stream", "id: " + String(event.sys_id) + "\n" + "data: " + JSON.stringify(outputObj) + "\n\n");
                    }

                    */
                }
            }
        }
        return clientResponse;
    }

})(g_request, g_response, g_processor);]]></script>
        <sys_class_name>sys_processor</sys_class_name>
        <sys_created_by>mmoody</sys_created_by>
        <sys_created_on>2020-05-02 00:46:42</sys_created_on>
        <sys_id>73aaf7c51b6450100cd4c91b1e4bcb2f</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>ServerSent</sys_name>
        <sys_package display_value="Health Monitoring" source="x_snc_health_monit">214e27cd1b2450100cd4c91b1e4bcbb3</sys_package>
        <sys_policy/>
        <sys_scope display_value="Health Monitoring">214e27cd1b2450100cd4c91b1e4bcbb3</sys_scope>
        <sys_update_name>sys_processor_73aaf7c51b6450100cd4c91b1e4bcb2f</sys_update_name>
        <sys_updated_by>mmoody</sys_updated_by>
        <sys_updated_on>2020-05-02 00:47:47</sys_updated_on>
        <type>script</type>
    </sys_processor>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Health Monitoring">214e27cd1b2450100cd4c91b1e4bcbb3</application>
        <file_path/>
        <instance_id>21ce51844f409a009211220f0310c78c</instance_id>
        <instance_name>hackathon061</instance_name>
        <name>sys_processor_73aaf7c51b6450100cd4c91b1e4bcb2f</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_processor"&gt;&lt;sys_processor action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;class_name/&gt;&lt;description&gt;ServerSent scripted processor&amp;#13;
ServerSent HTML5&amp;#13;
Usage: https://yourinstance.service-now.com/serversent.do?event_subscription=incident.updated&amp;amp;record_sid=d71da88ac0a801670061eabfe4b28f77&lt;/description&gt;&lt;interactive&gt;false&lt;/interactive&gt;&lt;name&gt;ServerSent&lt;/name&gt;&lt;parameters/&gt;&lt;params_endpoint/&gt;&lt;path&gt;serversent&lt;/path&gt;&lt;path_endpoint&gt;x_snc_health_monit_serversent&lt;/path_endpoint&gt;&lt;require_csrf&gt;false&lt;/require_csrf&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function process(g_request, g_response, g_processor) {
    // Event name from the sysevent table you wish to subscribe to
    var subscribedEvent = g_request.getParameter("event_subscription");
    // sys_id of the record that will trigger the event in the sysevent table. The value in the .instance field.
    var subscribedRecord = g_request.getParameter("record_sid");

    // Setup headers for ServerSent responses
    g_response.setContentType("text/event-stream");
    g_response.setHeader("Cache-Control", "no-cache");
    g_response.setHeader("Connection", "keep-alive");
    g_response.setHeader("Access-Control-Allow-Origin", "*");

    // Test if the subscribed event has fired, and if so send notification to subscribed client browser
    var clientResponse = eventFired(subscribedEvent, subscribedRecord);
    if (clientResponse.length &gt; 0) {
        g_processor.writeOutput("text/event-stream", "id: " + String(event.sys_id) + "\n" + "data: " + JSON.stringify(clientResponse) + "\n\n");
    }

    function eventFired(eventName, eventSid) {
        var clientResponse = [];
        // Query the sysevent table for the event desired.
        // Query for a specific record that the event was triggered against.
        // Query for the target event triggered within the current minute.
        var query = "sys_created_onONCurrent minute@javascript:gs.beginningOfCurrentMinute()@javascript:gs.endOfCurrentMinute()^ORsys_created_onONLast minute@javascript:gs.beginningOfLastMinute()@javascript:gs.endOfLastMinute()^name=" + eventName + "^instance=" + eventSid;
        var event = new GlideRecord('sysevent');
        event.addEncodedQuery(query);
        event.orderBy("sys_created_on");
        event.query();
        // Build client response from each occurance of the target event within the current minute.
        while (event.next()) {
            if (!gs.nil(event.instance)) {
                // Get the target record that the event was triggered from
                var record = new GlideRecord(String(event.table));
                if (record.get(event.instance)) {
                    var shouldSend = true;
                    // Construct a HTML formated message for client browser processing.
                    var messageOutput = [];
                    var updateEvent = false;
                    // Widget Table | persistent 
                    if (String(record.getTableName()) == "x_ebay_nsa_table_widget") {
                        // Expected JSON object in event.parm1
                        messageOutput.push(String(event.parm1));
                        if (event.state == "processed") {
                            //shouldSend = false;
                        }
                        else {
                            updateEvent = true;
                        }
                        updateEvent = true;
                    }
                    else {
                        messageOutput.push("&lt;h2&gt;" + String(event.parm1) + "&lt;/h2&gt;");
                    }
                    //messageOutput.push("&lt;h2&gt;" + record.number + " was updated successfully!&lt;/h2&gt;");

                    // Construct a JSON object for passing message and unique ID to client side.
                    var outputObj = {};
                    outputObj.message = messageOutput.toString();
                    outputObj.id = String(event.sys_id);
                    outputObj.instance = String(event.instance);
                    if (event.name == 'x_ebay_integration.transaction_failure') {
                        outputObj.type = "transaction";
                    }
                    else {
                        outputObj.type = "";
                    }
                    if (shouldSend) {
                        clientResponse.push(outputObj);
                    }
                    if (updateEvent) {
                        event.processed = new GlideDateTime();
                        event.state = "processed";
                        event.setWorkflow(false);
                        event.update();
                    }
                    /*
                    // Send message to client side browser using JSON object and event unique id. Use event-stream formatting as specified via the ServerSent protocol.
                    if (shouldSend) {
                        g_processor.writeOutput("text/event-stream", "id: " + String(event.sys_id) + "\n" + "data: " + JSON.stringify(outputObj) + "\n\n");
                    }

                    */
                }
            }
        }
        return clientResponse;
    }

})(g_request, g_response, g_processor);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_processor&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mmoody&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-05-02 00:46:42&lt;/sys_created_on&gt;&lt;sys_id&gt;73aaf7c51b6450100cd4c91b1e4bcb2f&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;ServerSent&lt;/sys_name&gt;&lt;sys_package display_value="Health Monitoring" source="x_snc_health_monit"&gt;214e27cd1b2450100cd4c91b1e4bcbb3&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Health Monitoring"&gt;214e27cd1b2450100cd4c91b1e4bcbb3&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_processor_73aaf7c51b6450100cd4c91b1e4bcb2f&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;mmoody&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-05-02 00:47:47&lt;/sys_updated_on&gt;&lt;type&gt;script&lt;/type&gt;&lt;/sys_processor&gt;&lt;/record_update&gt;</payload>
        <payload_hash>1899928724</payload_hash>
        <record_name>ServerSent</record_name>
        <reverted_from/>
        <source>b14e27cd1b2450100cd4c91b1e4bcbb5</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>mmoody</sys_created_by>
        <sys_created_on>2020-05-02 00:47:47</sys_created_on>
        <sys_id>a1be7fc91b6450100cd4c91b1e4bcb15</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>171d2da7ff30000001</sys_recorded_at>
        <sys_updated_by>mmoody</sys_updated_by>
        <sys_updated_on>2020-05-02 00:47:47</sys_updated_on>
        <type>Processor</type>
        <update_guid>2dbe7fc9b26450106bc985d7ffb24e14</update_guid>
        <update_guid_history>2dbe7fc9b26450106bc985d7ffb24e14:1899928724,4d8efbc9576450106630476552fbb467:-684258601,7d7e3bc9886450105b6f655c678e03c5:1709919964</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>mmoody</sys_created_by>
        <sys_created_on>2020-05-02 07:33:25</sys_created_on>
        <sys_db_object display_value="" name="sys_processor">sys_processor</sys_db_object>
        <sys_id>a1ffbe569d6a43ac81c49cb90867a0b1</sys_id>
        <sys_metadata>73aaf7c51b6450100cd4c91b1e4bcb2f</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ServerSent</sys_name>
        <sys_package display_value="Health Monitoring" source="x_snc_health_monit">214e27cd1b2450100cd4c91b1e4bcbb3</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Health Monitoring">214e27cd1b2450100cd4c91b1e4bcbb3</sys_scope>
        <sys_scope_delete display_value="">337682b5d69c4cbc8316811262c9ec24</sys_scope_delete>
        <sys_update_name>sys_processor_73aaf7c51b6450100cd4c91b1e4bcb2f</sys_update_name>
        <sys_update_version display_value="sys_processor_73aaf7c51b6450100cd4c91b1e4bcb2f">a1be7fc91b6450100cd4c91b1e4bcb15</sys_update_version>
        <sys_updated_by>mmoody</sys_updated_by>
        <sys_updated_on>2020-05-02 07:33:25</sys_updated_on>
    </sys_metadata_delete>
</record_update>
